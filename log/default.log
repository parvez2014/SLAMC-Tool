Start parsing in:
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:SLAMCTool_inputs
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:SLAMCTool_inputs

1: CLASS CLASSBEGIN 
2:     TYPE[int] FIELD[A,temp] 
3: CLASSEND 
Unhandled statement class recoder.java.statement.EmptyStatement

7:        CLASS CLASSBEGIN 
8:     TYPE[int] FIELD[GettingStarted,intMember] 
9:     TYPE[boolean] FIELD[GettingStarted,isStarted] OP[Assign] TRUE OP[LogicAnd] FALSE OP[LogicOr] TRUE FIELD[GettingStarted,isFinished] 
10:     TYPE[List] FIELD[GettingStarted,someString] 
12:                                                        FUNC[GettingStarted,outputMessage,PARA[String,PrintStream,],void] MethodBegin 
13:         CALL[PrintStream,println,1,void] VAR[String] 
14:     MethodEnd 
16:                                                        FUNC[GettingStarted,testMethod,PARA[int,int,String,],String] MethodBegin 
17:           RETURN LIT[String] 
18:         MethodEnd 
20:                                         FUNC[GettingStarted,mainFunction,PARA[String,],void] MethodBegin 
21:         TYPE[int] VAR[int] OP[Assign] ZERO VAR[int] VAR[int] 
22:         TYPE[StringBuffer] VAR[StringBuffer] VAR[StringBuffer] VAR[StringBuffer] 
23:         TYPE[StringBuffer] VAR[StringBuffer] OP[Assign] NEW 
24:         TYPE[BufferedReader] VAR[BufferedReader] OP[Assign] NEW 
25:         TYPE[String] VAR[String] 
26:                 TYPE[int] VAR[int] OP[Assign] LIT[Int] 
27:                 TYPE[float] VAR[float] 
28:                     TYPE[int] VAR[int] OP[Assign] 
29:                 VAR[int[]] OP[ArrayAccess] LIT[Int] OP[Assign] LIT[Int] 
30:                 VAR[int[]] OP[ArrayAccess] LIT[Int] OP[Assign] VAR[int[]] OP[ArrayAccess] LIT[Int] OP[Plus] VAR[int[]] OP[ArrayAccess] ZERO 
31:                 VAR[int] OP[Assign] LIT[Int] 
32:                 VAR[int] OP[Assign] ZERO 
33:                 VAR[int] OP[Assign] VAR[int] OP[BitAnd] VAR[int] 
34:                 VAR[int] OP[Assign] VAR[int] OP[BitOr] VAR[int] 
35:                 VAR[int] OP[Assign] VAR[int] OP[BitXOr] VAR[int] 
36:                 VAR[int] OP[Assign] OP[BitNot] VAR[int] 
37:                 VAR[int] OP[AndAssign] LIT[Int] 
38:                 VAR[int] OP[OrAssign] VAR[int] 
39:                 VAR[int] OP[XOrAssign] VAR[int] 
40:                 VAR[int] OP[DivAssign] LIT[Int] 
42:         WHILE VAR[String] OP[Assign] CALL[BufferedReader,readLine,0,String] OP[Ne] NULL WhileBegin 
43:             CALL[StringBuffer,append,1,StringBuffer] VAR[String] OP[Plus] LIT[Char] 
44:         WhileEnd 
45:                 VAR[String] OP[Assign] LIT[String] 
46:                 VAR[String] OP[Assign] LIT[String] OP[Plus] LIT[String] 
47:                 FIELD[GettingStarted,isStarted] OP[Assign] TRUE 
48:                   FIELD[GettingStarted,temp] OP[Assign] LIT[Int] 
49:         CALL[BufferedReader,close,0,void] 
50:         CALL[String,isEmpty,0,boolean] 
51:                 DO DoBegin 
52:                   VAR[int] OP[ModAssign] LIT[Int] 
53:                    VAR[int] OP[Assign] LIT[Int] 
55:                               DoEnd WHILE VAR[int] OP[Eq] LIT[Int] 
56:                 VAR[float] OP[Assign] CAST[float] VAR[int] 
57:                 VAR[float] OP[Assign] LIT[Int] OP[Le] LIT[Int] OP[Ternay] ZERO LIT[Int] 
58:                 WHILE VAR[int] OP[Eq] LIT[Int] WhileBegin 
59:                   VAR[int] OP[Assign] LIT[Int] 
60:                 WhileEnd 
61:                      FIELD[GettingStarted,isStarted] OP[Assign] FALSE 
62:                 CALL[GettingStarted,testMethod,3,String] LIT[Int] LIT[Int] LIT[String] 
63:                 CALL[GettingStarted,testMethod,3,String] LIT[Int] LIT[Int] LIT[String] 
64:                 FOR TYPE[int] VAR[int] VAR[int[]] ForBegin 
65:                   CALL[PrintStream,println,1,void] VAR[int] 
66:                 ForEnd 
67:                 FOR TYPE[int] VAR[int] OP[Assign] ZERO VAR[int] OP[Lt] LIT[Int] VAR[int] OP[PostInc] 
68:                   CALL[PrintStream,println,1,void] VAR[int] 
69:                 FOR TYPE[int] VAR[int] OP[Assign] LIT[Int] ForBegin 
70:                   CALL[PrintStream,println,1,void] VAR[int] 
71:                 ForEnd 
72:                 IF CALL[StringBuffer,length,0,int] OP[Gt] ZERO IfBegin 
73:             CALL[GettingStarted,outputMessage,2,void] CALL[StringBuffer,toString,0,String] FIELD[GettingStarted,out] 
74:             IF VAR[int] OP[Ne] ZERO IfBegin 
75:                 CALL[PrintStream,println,1,void] LIT[String] 
76:                 DO DoBegin 
77:                     CALL[StringBuffer,append,1,StringBuffer] LIT[String] 
78:                     IF CALL[StringBuffer,length,0,int] OP[Gt] LIT[Int] IfBegin 
79:                         CALL[PrintStream,print,1,void] LIT[String] 
80:                         BREAK 
78:                                              IfEnd 
82:                               DoEnd WHILE TRUE 
74:                       IfEnd 
83:               ElseBegin 
84:                 CALL[PrintStream,println,1,void] TRUE 
83:                  ElseEnd 
72:                                        IfEnd 
87:     MethodEnd 
89:                                              FUNC[GettingStarted,main,PARA[String,],void] MethodBegin 
90:             TYPE[String] VAR[String] OP[Assign] LIT[String] 
91:             CALL[PrintStream,println,1,void] CALL[String,hashCode,0,int] 
92:         MethodEnd 
93: CLASSEND 
